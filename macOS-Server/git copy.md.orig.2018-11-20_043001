[Git](https://git-scm.com/) -  распределённая система управления версиями.

https://git-scm.com/



# Установка Git на macOS

## Предпочтительно установить с помощью менеджера пакетов HomeBrew

Сначала устанавливаем [HomeBrew](brew.md), затем с его помощью устанавливаем Git:

	$ brew install git

# Ссылки

1. [Официальная подробная документация](https://git-scm.com/book/ru/v1)
2. [Обучающий интерактивный тур](https://githowto.com/ru)
3. [Видео инструкция по клонированию проекта Laravel из удаленного репозитория](https://www.youtube.com/watch?v=PNka4eZ5ojg)

# Использование

## Просмотр помощи

	$ git help

Или помощь по конкретной команде (например, log):

	$ git help log

## Конфигурация Git

### Основное

Добавление пользователя:

	$ git config --global user.name "USER_NAME"
	$ git config --global user.email LOGIN@GMAIL.COM

> USER_NAME - заменить на своё имя пользователя.
> LOGIN@GMAIL.COM - заменить на свой e-mail.

Проверяем изменения:

	$ git config -l

Преобразование переноса строк для Mac - концы строк из CRLF (\r\n) будут конвертированы в LF (\n) при отправке коммитов:

	$ git config --global core.autocrlf input

Преобразование переноса строк для Windows - концы строк из LF будут конвертированы в CRLF при выгрузке кода:

	$ git config --global core.autocrlf true

### Локальное игнорирование файлов

Для текущего пользователя:

	$ git config --global core.excludesfile ~/.gitexcludes

В папке пользователя нужно создать файл .gitexcludes
	
	$  touch ~/.gitexcludes

И добавить в него необходимые строки, например, игнорирование скрытых файлов Mac и редактора PHP Storm, через редактор командной строки vim:

	$ vim ~/.gitexcludes
	Далее нажимаем a или i, вставляем строки:
	.DS_Store
	.idea/
	Далее нажимаем два раза shift+z или Escape, затем двоеточие, затем набираем wq и enter.

## Создание Git репозитория в каталоге проекта

Переходим в папку проекта и далее все время работаем в ней, например:

	$ cd ~/SITES/SITE

> Знак тильда "~" - сокращенное обозначение домашнего каталога (равнозначно $HOME/SITES/SITE или полному пути, который можно увидеть в терминале, с помощью команды "echo $HOME", которая выведет, например: /Users/Admin). 
> SITES - название каталога с проектами (например: ~/sites).
> SITE - название каталога проекта (например: /sites/localhost).

Например:

	$ cd

Создаем репозиторий:

	$ git init

В каталоге проекта будет создан каталог .git (например: ~/SITES/SITE/.git)

## Запись изменений в репозиторий

### Определение состояния файлов

	$ git status 

### Добавление файлов для отслеживания (индексирование)

Добавление всех файлов для отслеживания в текущем каталоге. (например в: ~/SITES/SITE):
	
	$ git add .

Или добавление все файлов корневого каталога независимо от текущего нахождения:

	$ git add :/

Добавление файлов из определенной папки (например: ~/SITES/SITE/app/):

	$ cd app/
	$ git add .

Или:

	$ git add :/app

Добавление одного файла:

	$ git add index.php

### Просмотр индексированных и неиндексированных изменений

	$ git status

Просмотр только отслеживаемых файлов:

	$ git status --untracked-files=no

Или сокращенно (-u[значение]):

	$ git status -uno

Обычный просмотр всех файлов:

	$ git status -unormal

Просмотр отдельных файлов в неотслеживаемых каталогах (например: ~/SITES/SITE/vendor/):

	$ cd vendor/
	$ git status -uall

Более подробно просмотр неиндексированных изменений:

	$ git diff 

Или более подробно индексированных изменений:

	$ git diff --cached

### Фиксация изменений

Только индексированных, сразу со своим комментарием:

	$ git commit -m "new"

Или с ручным добавлением комментария:

	$ git commit

После этого потребуется ввести свой комментарий или сохранить предложенный, также можно использовать расширенные комментарии (в комментариях будет также помещена дельта/diff изменений):

	$ git commit -v

Всех, с одновременным добавлением неиндексированных в индекс, позволяя обойтись без "git add":

	$ git commit -a -m "new"

### Игнорирование индексации

Создаем файл для указания игнорируемых файлов и папок, которые не будут добавлять в репозиторий:

	$  touch ~/.gitignore

И редактируем с помощью vim (см. выше), добавляя с новой строки исключаемые каталоги, (например: исключаем папку /vendor):
/vendor

### Удаление файлов

Удаление файла из отслеживаемых при удалении из каталога (например: test.php):

	$ rm test.php
	$ git rm test.php

Если вы изменили файл и уже проиндексировали его, вы должны использовать принудительное удаление с помощью параметра -f.

	$ rm test.php
	$ git rm -f test.php

Удаление файла только из индекса:

	$ git rm --cached test.php

Или группы файлов, например логи ошибок, которые забыли добавить в игнорируемые:

	$ git rm log/\*.log

### Перемещение файла

Например, переименовываем файл и именем FILE_FROM в FILE_TO:
	$ git mv FILE_FROM FILE_TO

## Просмотр истории коммитов

	$ git log

Или с помощью графического интерфейса:

	$ gitk

И:

	$ git gui

### Решение возможной ошибки при запуске gitk

При этом может возникнуть ошибка при запуске gitk, типа:
Error in startup script: unknown color name "lime"
…

Причина может быть в версии Tcl & Tk < 8.6.4, это можно увидеть набрав команду:

	$ wish

И далее в терминале ввести:

	$ % info patchlevel

Обновить на Mac можно с помощью HomeBrew:

	$ brew cask install tcl

[Источник решения](http://stackoverflow.com/questions/34637896/gitk-will-not-start-on-mac-unknown-color-name-lime)

## Отмена изменений

Изменение последнего коммита:

	$ git commit --amend

Например, забыли проиндексировать изменения в файле "git commit -m 'initial commit'":

	$ git add forgotten_file
	$ git commit --amend

Отмена индексации:

	$ git reset HEAD test.php

Отмена изменений в файла после добавления его на отслеживание - безвозвратная:

	$ git add test.php

После изменения в файле добавленном на отслеживание, можно отменить в нем изменения:

	$ git checkout --test.php

## Работа с удаленными репозиториями

Если репозиторий был cклонирован, то он автоматически добавляется с именем «origin».

### Отображение удалённых репозиториев

Просмотр сокращенных названий репозиториев (алиасов) и соответствующих им Url:

	$ git remote -v

Просмотр только названий:

	$ git remote show

Инспекция удаленного репозитория:

	$ git remote show origin

### Добавление удалённых репозиториев

	$ git remote add ORIGIN GITSERVER:REPOSITORY.git

> ORIGIN - сокращенное название репозитория (например: главного репозитория - origin).
> GITSERVER - Git-сервер с удаленным репозиторием, например: GitHub или свой сервер подключаемый по SSH.
> REPOSITORY.git - название удаленного репозитория на Git-сервере (в конце ".git").

### Fetch и Pull - Получение изменений из удаленного репозитория

Для репозитория с сокращенным названием origin (определенного по умолчанию при клонировании):

	$ git fetch

Или для конкретного репозитория:

	$ git fetch origin

Далее необходимо выполнить слияние:

	$ git merge origin/master

Либо можно использовать сразу одну команду для получения и слияния:

	$ git pull

Или для конкретного репозитория и ветки:

	$ git pull origin master

### Push - Отправка изменений в удаленный репозиторий

Для репозитория с сокращенным названием origin (определенного по умолчанию при клонировании) и ветки master:

	$ git push origin master

Если же установить отслеживаемую ветку, т.е. ветку по умолчанию или локальный репозиторий был клонирован:

	$ git push --set-upstream origin master

То можно отправлять изменения без указания репозитория и ветки, просто:

	$ git push

Просмотреть отслеживаемые метки:

	$ git branch -vv

### Удаление и переименование удаленных репозиториев

Переименование:

	$ git remote rename origin origin2

Удаление:

	$ git remote rm origin2

Изменение Url:

	$ git remote set-url origin GITSERVER:REPOSITORY.git

Или отредактировать файл в каталоге репозитория /.git/config: секция [remote "origin"], параметр - url. 

## Настройка своего Git-сервера

### Клонирование локального репозитория в новый "голый репозиторий"

Входим в каталог проектов:

	$ cd ~/SITES

И клонируем репозиторий проекта с параметром "--bare":

	$ git clone --bare SITE REPOSITORY.git

> SITE - название каталога проекта.
> REPOSITORY.git - название нового "голого репозитория" (например: используем имя проекта SITE и добавляем в конце ".git").

Примерно тоже самое, что мы просто скопируем репозиторий /SITE/.git из каталога проекта в каталог проектов и переименуем его:

	$ cp -Rf ~/SITES/SITE/.git ~/sites/SITE.git

Или клонируем репозиторий внутри каталога проекта:

	$ cd ~/SITES/SITE
	$ git clone --bare .git SITE.git

### Размещение "голого репозитория" на Git-сервере

	$ scp -r REPOSITORY.git GITSERVER:REPOSITORIES

> REPOSITORY.git - название "голого репозитория" (в конце ".git").
> GITSERVER - Git-сервер с удаленным репозиторием, например: GitHub или свой сервер подключаемый по SSH.
> REPOSITORIES - путь и название каталога с репозиториями, куда должен быть скопирован "голый репозиторий" (например: ~/repositories).

И удаляем «голый репозиторий»:

	$ rm REPOSITORY.git

### Клонирование репозитория c удаленного Git-сервера по SSH

Теперь пользователь, имеющий доступ к Git-серверу, может склонировать удаленный репозиторий по SSH и начать работать над общим проектом.

	$ git clone GITSERVER:REPOSITORY.git

## Настройка своего Git-сервера с помощью Gitolite

Предпочтительный вариант.

1. [Документация Git](https://git-scm.com/book/ru/v1/Git-на-сервере-Gitolite)
2. [Официальный сайт](http://gitolite.com/)

### Установка

Сначала необходимо создать пользователя с именем "git" на Git-сервере (где будет размещен удаленный репозиторий).

Затем настроить вход по SSH на Git-сервер по публичному ключу без возможности входа по паролю.

После чего зайти по SSH на сервер под именем пользователя "git":

	$ ssh GIT

> GIT - Git-сервер с удаленным репозиторием, например: git@GITSERVER -i .ssh/id_rsa_USER, где git - это имя пользователя, GITSERVER - IP-сервера Git, .ssh/id_rsa_USER - публичный ключ локального пользователя.

Затем скопировать в домашний каталог пользователя git свой публичный ключ id_rsa_USER.pub и переименовать его в USER.pub  (т.е. чтобы в названии было только имя пользователя и расширение .pub).

Далее необходимо клонировать репозиторий Gitolite и установить:

	$ git clone git://github.com/sitaramc/gitolite
	$ gitolite/install -ln
	$ gitolite setup -pk $HOME/USER.pub

> Последняя из команд создаст в домашнем каталоге новый Git-репозиторий с именем /gitolite-admin в каталоге /repositories, где в дальнейшем должны размещаться все Git-репозитории. А также скопирует специальную команду Gitolite и публичный ключ USER.pub в .ssh/authorized_keys, при этом в командной строке выведет предупреждение, что публичный ключ является дубликатом, потому что уже настроен доступ по публичному ключу на сервер.
> Поэтому в конце установки Gitolite необходимо обязательно удалить свой публичный ключ как дубликат и оставить только команду Gitolite, уже содержащую наш публичный ключ.

Перед завершением установки, нужно обязательно создать каталог /bin в домашнем каталоге:

	$ mkdir bin

И добавить каталог $HOME/bin в $PATH (в терминале можно проверить текущее значение "echo $PATH"):

	$ sudo vi ~/.bash_profile
	Нажимаем «a» (или «i»), вставляем строку:
	export PATH=$PATH:$HOME/bin
	Нажимаем Esc и SHIFT+Z 2 раза (или двоеточие, затем wq и enter) и выполняем:
	$ source ~/.bash_profile

В завершении обязательно удаляем свой публичный ключ из .ssh/authorized_keys иначе при входе на сервер Gitolite не будет запускаться.

Выходим и заново заходим по SSH на сервер под именем пользователя "git",  вместо входа на сервер, должно быть выведено сообщение, уведомляющее, что на сервере используется Gitolite и соединение закрыто.

### Настройка

Теперь на локальном компьютере необходимо склонировать репозиторий gitolite-admin  (например, в каталог с проектами), с помощью которого будет осуществлять управление доступом к репозиториям:

	$ cd ~/SITES
	$ git clone git:gitolite-admin

Входим в репозиторий:

	$ cd ~/SITES/gitolite-admin
	$ ls
	conf keydir
	$ find conf keydir -type f
	conf/gitolite.conf keydir/grishak.pub
	$cat conf/gitolite.conf
	repo gitolite-admin
    	RW+     =   USER
	repo testing
    	RW+     =   @all

> /conf - каталог содержит файл gitolite.conf для настроек уровня доступа к репозиториям.
> /keydir - каталог содержит наш публичный ключ USER.pub, сюда же будет необходимо добавлять публичные ключи других пользователей (т.е. на Git-сервер их добавлять не нужно), например: USER2.pub.

По умолчанию для репозитория gitolite-admin на Git-сервере у пользователя USER доступ на чтение и запись. Для репозитория testing доступ на чтение и запись у всех пользователей.

 **Теперь для того, чтобы добавить новый репозиторий на Git-сервер, нет необходимости клонировать "голый репозиторий", достаточно добавить в конфигурацию gitolite.conf права на новый репозиторий и затем добавить url на него в локальный репозиторий.**

### Пример использования

Добавляем права на управление новым репозиторием в gitolite.conf:

	repo test
    	RW+     =   USER

И отправляем данные в удаленный репозиторий:

	$ git commit -a -m "Add new repo test"
	$ push

Затем переходим в новый проект и инициализируем Git:

	$ cd ~/SITES/SITE
	$ git init
	
Можем посмотреть статус:

	$ git status
	
Добавляем все файлы для отслеживания и фиксируем изменения:

	$ git add .
	$ git commit -m "Init"

Можно выполнять это одной командой, только в том случае если все файлы уже были отправлены на отслеживание командой "git add .", но изменения еще не были зафиксированы: 

	$ git commit -a -m "Init"

Можем посмотреть лог:

	 $ git log

Теперь необходимо добавить URL удаленного Git-репозитория:

	$ git remote add origin git:test.git

Можем посмотреть добавленные удаленные репозитории:

	$ git remote
	$ git remote show origin

Далее необходимо отправить изменения из ветки master в новый репозиторий на GIt-сервере:

	$ git push origin master
	
Теперь на другом компьютере мы можем клонировать удаленный репозиторий (для примера клонируем в другое имя проекта):

	$ git clone git:test.git test2

Внесем изменения в какой-нибудь отслеживаемый файл, зафиксируем и отправим изменения в удаленный репозиторий:

	$ git commit -a -m "Add test2"
	$ git push

Вернемся в локальный репозиторий и получим новые изменения:

	$ git fetch origin

Но они находятся в ветке master, поэтому нужно ее слить с нашим репозиторием origin:

	$ git merge origin/master

Либо мы можем выполнить сразу команду pull:

	$ git pull git:test.git

Или вообще мы можем определить репозиторий по умолчанию и затем просто всегда выполнять команду pull:

	$ git push --set-upstream origin master
	$ git pull
